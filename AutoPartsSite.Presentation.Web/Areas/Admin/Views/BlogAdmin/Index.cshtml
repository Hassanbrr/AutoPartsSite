@model IEnumerable<BlogPostDto>
<div class="col-xs-12 col-sm-12 col-md-12 col-lg-12 p-2">

	<div class="row">
		<div class="page-header breadcrumb-header p-3 mr-2 ml-2 m-2">
			<div class="row align-items-end ">

				<div class="col-lg-12">
					<ol class="breadcrumb float-sm-right">
						<li class="breadcrumb-item "><a as><i class="fas fa-home"></i></a></li>
						<li class="breadcrumb-item active"> وبلاگ ها  </li>

					</ol>
				</div>
			</div>
		</div>
	</div>
	<div class="card shade h-100 ">
		<div class="card-body table-responsive">

			<div class="d-flex justify-content-around">
				<h5 class="card-title">لیست وبلاگ ها   </h5>
				<button class="btn o-primary  text-center" onclick="OpenUpsertModal()">اضافه کردن</button>
			</div>
			<hr>
			<table id="BTable" class="table table-striped   m-1" style="width:100%">
				<thead>
					<tr>
						<th> شناسه </th>
						<th>نام</th>
						<th> خلاصه</th>
						<th>محتوا‌ </th>
						<th>عکس</th>
						<th>تاریخ ساخت</th>
						<th>   تنظیمات</th>

					</tr>
				</thead>
				<tbody>


					@{
						int counter = 1; // شمارنده دستی
					}
					@foreach (var blog in Model)
					{
						<tr>
							<td>@counter</td>
							<td>@blog.Title</td>
							<td>@blog.Summary</td>
							<td>@blog.Content</td>
							<td><img src="@blog.FeaturedImage" alt="Alternate Text" /></td>
							<td>@blog.PublishDate</td>
							<td>
								<div class="d-flex align-items-center">
									<button class="btn c-warning me-2" onclick="OpenUpsertModal(@blog.Id)">
										<i class="fa fa-edit"></i>
									</button>
									<button class="btn c-forth">
										<i class="fa fa-trash"></i>
									</button>
								</div>
							</td>

						</tr>
						counter++;
					}


				</tbody>
			</table>
		</div>

	</div>
</div>
<div class="modal fade" id="UpsertModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content" id="UpsertModalContent">
			@* <partial name="_UpsertModal"/> *@
		</div>
	</div>
</div>
@section Scripts
{
	<script>
		// تابع باز کردن فرم Upsert (AJAX + Partial)
		function OpenUpsertModal(blogId = 0) {
		  const url = `/Admin/BlogAdmin/Upsert${blogId ? '?id=' + blogId : ''}`;
		  fetch(url)
			.then(res => res.text())
			.then(html => {
			  // درج HTML دریافتی
			  const container = document.getElementById('UpsertModalContent');
			  container.innerHTML = html;

			  // اگر ویرایشگر قبلی وجود دارد، تخریبش کن
			  if (window.editor) {
				window.editor.destroy();
				window.editor = null;
			  }

			 ///adapter

					 class MyUploadAdapter {
		constructor(loader) {
		// The file loader instance to use during the upload.
		this.loader = loader;
		}
		// Starts the upload process.
		upload() {
		return this.loader.file
		.then(file => new Promise((resolve, reject) => {
		this._initRequest();
		this._initListeners(resolve, reject, file);
		this._sendRequest(file);
		}));
		}
		// Aborts the upload process.
		abort() {
		if (this.xhr) {
		this.xhr.abort();
		}
		}
		// Initializes the XMLHttpRequest object using the URL passed to the constructor.
		_initRequest() {
		const xhr = this.xhr = new XMLHttpRequest();
		// Note that your request may look different. It is up to you and your editor
		// integration to choose the right communication channel. This example uses
		// a POST request with JSON as a data structure but your configuration
		// could be different.
		xhr.open('POST', '/Admin/BlogAdmin/UploadImageAdmin/', true);
		xhr.responseType = 'json';
		}
		// Initializes XMLHttpRequest listeners.
		_initListeners(resolve, reject, file) {
		const xhr = this.xhr;
		const loader = this.loader;
		const genericErrorText = `Couldn't upload file: ${file.name}.`;
		xhr.addEventListener('error', () => reject(genericErrorText));
		xhr.addEventListener('abort', () => reject());
		xhr.addEventListener('load', () => {
		const response = xhr.response;
		// This example assumes the XHR server's "response" object will come with
		// an "error" which has its own "message" that can be passed to reject()
		// in the upload promise.
		//
		// Your integration may handle upload errors in a different way so make sure
		// it is done properly. The reject() function must be called when the upload fails.
		if (!response || response.error) {
		return reject(response && response.error ? response.error.message : genericErrorText);
		}
		// If the upload is successful, resolve the upload promise with an object containing
		// at least the "default" URL, pointing to the image on the server.
		// This URL will be used to display the image in the content. Learn more in the
		// UploadAdapter#upload documentation.
		resolve({
		default: response.url
		});
		});
		// Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
		// properties which are used e.g. to display the upload progress bar in the editor
		// user interface.
		if (xhr.upload) {
		xhr.upload.addEventListener('progress', evt => {
		if (evt.lengthComputable) {
		loader.uploadTotal = evt.total;
		loader.uploaded = evt.loaded;
		}
		});
		}
		}
		// Prepares the data and sends the request.
		_sendRequest(file) {
		// Prepare the form data.
		const data = new FormData();
		data.append('upload', file);
		// Important note: This is the right place to implement security mechanisms
		// like authentication and CSRF protection. For instance, you can use
		// XMLHttpRequest.setRequestHeader() to set the request headers containing
		// the CSRF token generated earlier by your application.
		// Send the request.
		this.xhr.send(data);
		}
		}
		function MyCustomUploadAdapterPlugin(editor) {
		editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
		// Configure the URL to the upload script in your back-end here!
		return new MyUploadAdapter(loader);
		};
		}
			   ClassicEditor
				.create(container.querySelector('#Content'), {
				  language: 'fa',

				  extraPlugins: [MyCustomUploadAdapterPlugin],

				})
				.then(editor => window.editor = editor)
				.catch(error => console.error('خطا در CKEditor:', error));


			  // نمایش modal
			  new bootstrap.Modal(document.getElementById('UpsertModal')).show();
			})
			.catch(err => console.error('خطا در لود Partial:', err));
		}

		// ارسال فرم Upsert با AJAX
		document.addEventListener('submit', function(e) {
		  if (e.target.matches('#UpsertBlogForm')) {
			e.preventDefault();
			const form = e.target;
			fetch(form.action, {
			  method: form.method,
			  body: new FormData(form)
			})
			.then(res => res.json())
			.then(dto => {
			  if (dto.success) {
				location.reload();
			  }
			})
			.catch(err => console.error('خطا در ارسال فرم:', err));
		  }
		});

		// تابع باز کردن modal تأیید حذف
		function OpenDeleteModal(id) {
		  document.getElementById('deleteId').value = id;
		  new bootstrap.Modal(
			document.getElementById('DeleteConfirmModal')
		  ).show();
		}
	</script>

	<script>

		$(document).ready(function () {
		  $('#blogTable').DataTable({
			processing: true,
			serverSide: true,
			responsive: true,
			ajax: {
			  url: '/Admin/BlogAdmin/GetAll',
			  type: 'POST',
			  dataSrc: 'data'
			},
			columns: [
			  { data: 'id' },
			  { data: 'title' },
			  { data: 'summary' },
			  { data: 'content' ,
			  render:data => `<p> جهت مشاهده دیتا به بخش ویرایش بروید <p>`},      // اگر می‌خواهید محتوا نمایش دهید
			  {
				data: 'featuredImage',   // فرض کردیم DTO این فیلد را دارد
				render: data => `<img src="${data}" alt="" style="height:40px">`
			  },
			  { data: 'createdAt' },
			  {
				data: null,
				orderable: false,
				render: row => `
				  <button class="btn btn-sm btn-warning" onclick="OpenUpsertModal(${row.id})">ویرایش</button>
				  <button class="btn btn-sm btn-danger" onclick="OpenDeleteModal(${row.id})">حذف</button>
				`
			  }
			],
			language: {
			  url: '//cdn.datatables.net/plug-ins/1.13.6/i18n/fa.json'
			},
			dom: 'Bfrtip',
			buttons: [
			  { extend: 'copy', text: 'کپی' },
			  { extend: 'excel', text: 'اکسل' },
			  { extend: 'print', text: 'چاپ' }
			],
			order: [[5, 'desc']], // مرتب‌سازی بر اساس ستون تاریخ (ایندکس 5)
			lengthMenu: [[5,10,20,-1],[5,10,20,'همه']]
		  });
		});


	</script>


}
